import logging
import asyncio
import os
import openai
import requests
from bs4 import BeautifulSoup
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.client.default import DefaultBotProperties
from fastapi import FastAPI
import uvicorn

# üîπ –ó–∞–≥—Ä—É–∑–∫–∞ API-–∫–ª—é—á–µ–π
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

if not TOKEN:
    raise ValueError("‚ùå –û—à–∏–±–∫–∞: TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω!")
if not OPENAI_API_KEY:
    raise ValueError("‚ùå –û—à–∏–±–∫–∞: OPENAI_API_KEY –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω!")

# üîπ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher(storage=MemoryStorage())

# üîπ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# üîπ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
main_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìã –ù–∞—à–∏ —É—Å–ª—É–≥–∏"), KeyboardButton(text="üí∞ –¶–µ–Ω—ã")],
        [KeyboardButton(text="üìÇ –ú–µ–¥ —Å–ø—Ä–∞–≤–∫–∞"), KeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å")],
        [KeyboardButton(text="üóì –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å")]
    ],
    resize_keyboard=True
)

# üîπ –°–æ–∑–¥–∞—ë–º FastAPI-—Å–µ—Ä–≤–µ—Ä
app = FastAPI()

@app.get("/")
def read_root():
    return {"status": "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"}

# üîπ –§—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å —Å–∞–π—Ç–∞
def get_info_from_scubabirds():
    url = "https://www.scubabirds.ru/"
    headers = {"User-Agent": "Mozilla/5.0"}
    
    try:
        response = requests.get(url, headers=headers, timeout=10)
        if response.status_code == 200:
            soup = BeautifulSoup(response.text, 'html.parser')
            paragraphs = soup.find_all('p')  
            text_content = " ".join([p.get_text() for p in paragraphs])
            return text_content[:1500]  # –û–≥—Ä–∞–Ω–∏—á–∏–º –¥–æ 1500 —Å–∏–º–≤–æ–ª–æ–≤
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å —Å–∞–π—Ç–∞."
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å —Å–∞–π—Ç–∞."

# üîπ –§—É–Ω–∫—Ü–∏—è –æ–±—â–µ–Ω–∏—è —Å GPT (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞)
def ask_gpt(user_query):
    try:
        site_info = get_info_from_scubabirds()
        
        openai.api_key = OPENAI_API_KEY
        response = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –¥–∞–π–≤–∏–Ω–≥–µ."},
                {"role": "user", "content": f"–í–æ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å —Å–∞–π—Ç–∞ Scuba Birds: {site_info}. –¢–µ–ø–µ—Ä—å –æ—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å: {user_query}"}
            ]
        )
        return response["choices"][0]["message"]["content"]

    except openai.error.OpenAIError as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ OpenAI: {e}")
        return "‚ùå –û—à–∏–±–∫–∞: OpenAI –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    except Exception as e:
        logging.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

# üîπ –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def start_command(message: types.Message):
    await message.answer(
        "–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –ú—ã —Ä–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤–∞—Å –≤ –Ω–∞—à–µ–º –î–∞–π–≤ –¶–µ–Ω—Ç—Ä–µ Scuba Birds. –ß–µ–º –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å?", 
        reply_markup=main_keyboard
    )

# üîπ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
@dp.message(lambda message: message.text and "—É—Å–ª—É–≥–∏" in message.text.lower())
async def services(message: types.Message):
    text = (
        "üìå –ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–µ —É—Å–ª—É–≥–∏:\n"
        "1Ô∏è‚É£ –ü—Ä–æ–±–Ω–æ–µ –ø–æ–≥—Ä—É–∂–µ–Ω–∏–µ\n"
        "2Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –î–∞–π–≤–µ—Ä–∞\n"
        "3Ô∏è‚É£ –ù—ã—Ä—è–ª–∫–∞ –¥–ª—è —Å–µ—Ä—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–π–≤–µ—Ä–æ–≤\n"
        "4Ô∏è‚É£ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ –¥–∞–π–≤–∏–Ω–≥—É\n"
        "5Ô∏è‚É£ –û–±—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–æ–≤ (Dive Master/Instructor)\n\n"
        "–û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –Ω–∞—à–∏–º–∏ —Ü–µ–Ω–∞–º–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ <b>–¶–µ–Ω—ã</b>!"
    )
    await message.answer(text)

@dp.message(lambda message: message.text and "—Ü–µ–Ω—ã" in message.text.lower())
async def prices(message: types.Message):
    text = (
        "üí∞ –ù–∞—à–∏ —Ü–µ–Ω—ã:\n\n"
        "üîπ <b>–ü—Ä–æ–±–Ω–æ–µ –ø–æ–≥—Ä—É–∂–µ–Ω–∏–µ</b> ‚Äî 2,800 TBH \n"
        "üîπ <b>–ö—É—Ä—Å Open Water Diver</b> (–¥–æ 18 –º–µ—Ç—Ä–æ–≤) ‚Äî 8,990 TBH \n"
        "üîπ <b>–ö—É—Ä—Å Advance Open Water Diver</b> ‚Äî 8,490 THB \n"
        "üîπ <b>–ö—É—Ä—Å Rescue Diver</b> ‚Äî 8,500 THB \n"
        "üîπ <b>–ö—É—Ä—Å Dive Master</b> ‚Äî –æ—Ç 35,000 THB \n\n"
        "–°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –¥–ª—è –∑–∞–∫–∞–∑–∞!"
    )
    await message.answer(text)

# üîπ –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥. —Å–ø—Ä–∞–≤–∫–∏
@dp.message(lambda message: message.text and "–º–µ–¥ —Å–ø—Ä–∞–≤–∫–∞" in message.text.lower())
async def send_medical_form(message: types.Message):
    document_path = "medical_form.pdf"  # –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞

    if os.path.exists(document_path):
        await message.answer_document(types.FSInputFile(document_path), caption="üìé –í–æ—Ç –≤–∞—à–∞ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞!")
    else:
        await message.answer("‚ùå –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π.")

# üîπ –ö–Ω–æ–ø–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
@dp.message(lambda message: message.text and "–∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å" in message.text.lower())
async def booking(message: types.Message):
    text = (
        "üóì <b>–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ</b>\n\n"
        "üîπ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –æ–Ω–ª–∞–π–Ω: <a href='https://www.scubabirds.com/booking-now.html'>Scuba Birds Booking</a>\n"
        "üîπ –ù–∞–ø–∏—Å–∞—Ç—å –≤ WhatsApp: <a href='https://wa.me/66990307571'>+66 990 307 571</a>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è!"
    )
    await message.answer(text, parse_mode="HTML", disable_web_page_preview=True)

# üîπ GPT –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
@dp.message()
async def gpt_response(message: types.Message):
    user_query = message.text
    response = ask_gpt(user_query)
    
    for i in range(0, len(response), 4000):
        await message.answer(response[i:i+4000])

# üîπ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ —Å–µ—Ä–≤–µ—Ä–∞
async def start_bot():
    logging.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await dp.start_polling(bot)

def start_fastapi():
    uvicorn.run(app, host="0.0.0.0", port=int(os.getenv("PORT", 8080)))

async def main():
    loop = asyncio.get_running_loop()
    bot_task = loop.create_task(start_bot())
    server_task = loop.run_in_executor(None, start_fastapi)
    await asyncio.gather(bot_task, server_task)

if __name__ == "__main__":
    try:
        loop = asyncio.get_event_loop()
        loop.run_until_complete(main())
    except (KeyboardInterrupt, SystemExit):
        logging.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")