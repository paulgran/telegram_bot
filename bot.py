import logging
import os
import openai
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
import asyncio

from config import OPENAI_API_KEY, TELEGRAM_TOKEN, GPT_MODEL

logging.basicConfig(level=logging.INFO)

openai.api_key = OPENAI_API_KEY
bot = Bot(token=TELEGRAM_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()

def get_main_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")],
            [KeyboardButton(text="–°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫"), KeyboardButton(text="–°–±—Ä–æ—Å–∏—Ç—å –ª–∏–º–∏—Ç")]
        ],
        resize_keyboard=True
    )

@dp.message(CommandStart())
async def start_handler(message: Message):
    await message.answer("üåê Choose your language / –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:", reply_markup=get_main_keyboard())

@dp.message(lambda m: m.text == "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
async def ask_handler(message: Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:")

@dp.message()
async def gpt_handler(message: Message):
    user_input = message.text
    await message.answer("‚úçÔ∏è –î—É–º–∞—é...")

    try:
        response = openai.ChatCompletion.create(
            model=GPT_MODEL,
            messages=[{"role": "user", "content": user_input}]
        )
        reply = response.choices[0].message.content
    except Exception as e:
        logging.error(f"[GPT ERROR] {e}")
        reply = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ GPT. –ü—Ä–æ–≤–µ—Ä—å API-–∫–ª—é—á –∏–ª–∏ –ª–∏–º–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è."

    await message.answer(reply)

async def main():
    print("‚úÖ –ù–æ–≤—ã–π bot.py –∑–∞–≥—Ä—É–∂–µ–Ω")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
